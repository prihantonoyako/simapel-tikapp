<script>
    function extract_multi_bts(item, index, arr) {
        // console.log(item);
    }
    let id_bts = <?= esc($bts->id_bts, 'js') ?>;
    let freqBts = <?= esc($bts->frequency, 'js') ?>;
    let channel_width = "<?= esc($bts->channel_width, 'js') ?>";
    let band = "<?= esc($bts->band, 'js') ?>";
    let ssidBts = "<?= esc($bts->ssid, 'js') ?>";
    let tick_pos = init_tick_bts(band);
    let dataFreqBts = init_bts_freq(band, channel_width, freqBts);
    let dataSeries = [];
    let nameProc = ssidBts + ": " + freqBts;
    dataSeries.push({
        name: nameProc,
        data: dataFreqBts
    });
    // dataSeries.push({
    //     name: "yako",
    //     data: dataFreqBts
    // });
    let url = "<?= esc(base_url('api/get/bts/other'), 'js') ?>" + "/" + id_bts;
    $.ajax({
        url: url,
        type: "GET",
        dataType: 'json',
        data: {
            query: id_bts,
        },
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        },
        success: function(result) {
            result.forEach(element => {
                let otherFreq = element.frequency;
                let otherchannel_width = element.channel_width;
                let dataOtherFreq = init_bts_freq(band, otherchannel_width, otherFreq);
                let nameProc = String(element.ssid) + ": " + otherFreq;
                dataSeries.push({
                    name: String(element.ssid),
                    data: dataOtherFreq
                });
                
            });
            // console.log(dataSeries);
            Highcharts.chart('visualisasi-frequency', {
                chart: {
                    type: 'areaspline'
                },
                title: {
                    text: 'Frequency Visualizer'
                },
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    verticalAlign: 'top',
                    x: 150,
                    y: 100,
                    floating: true,
                    borderWidth: 1,
                    backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF'
                },
                xAxis: {
                    tickPositions: tick_pos
                },
                yAxis: {
                    tickPositioner: function() {
                        var positions = [],
                            tick = Math.floor(this.dataMin),
                            increment = Math.ceil((this.dataMax - this.dataMin) / 6);

                        if (this.dataMax !== null && this.dataMin !== null) {
                            for (tick; tick - increment <= this.dataMax; tick += increment) {
                                positions.push(tick);
                            }
                        }
                        return positions;
                    }
                },
                tooltip: {
                    shared: true,
                },
                credits: {
                    enabled: false
                },
                plotOptions: {
                    areaspline: {
                        fillOpacity: 0.5
                    }
                },
                series: dataSeries
            });
        },
        error: function(jqXHR, textStatus, errorThrown) {
            swal({
                title: "Oops!",
                text: jqXHR.responseText,
                icon: "error",
                timer: 5000
            });
        }
    });
</script>